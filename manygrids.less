/* Grids.less */
#grid {
    #system(@grid, @gutter, @width) {
        margin: 0 auto;
        width: @width;
        zoom: 1;

         &:before
        ,&:after {
            clear: both;
            content: '.';
            display: block;
            overflow: hidden;
            visibility: hidden;
            font-size: 0;
            line-height: 0;
            width: 0;
            height: 0;
        }

        &.show_columns {
            @_width: @width / @grid - @gutter;
            background-image: -webkit-linear-gradient(0, transparent @_width, rgba(0, 0, 0, 0.07) @_width);
            background-image:    -moz-linear-gradient(0, transparent @_width, rgba(0, 0, 0, 0.07) @_width);
            background-image:     -ms-linear-gradient(0, transparent @_width, rgba(0, 0, 0, 0.07) @_width);
            background-image:      -o-linear-gradient(0, transparent @_width, rgba(0, 0, 0, 0.07) @_width);
            background-image:         linear-gradient(0, transparent @_width, rgba(0, 0, 0, 0.07) @_width);
            background-position: @gutter / 2 0px;
            background-size: @_width + @gutter;
        }

        @display: inline;
        @float: left;

        .loop (@index) when (@index > 0) {
            (~".grid_@{index}")   {
                .mixin() when (@grid <  @index) {display: none;}
                .mixin() when (@grid >= @index) {
                    display: inline;
                    float: left;
                    margin: 0 @gutter / 2;
                    position: relative;
                    width: (@width / @grid * @index) - @gutter;
                }
                .mixin();
            }

            (~".prefix_@{index}") {
                .mixin() when (@grid <  @index) {display: none;}
                .mixin() when (@grid >= @index) {
                    padding-left: (@width / @grid * @index);
                }
                .mixin();
            }

            (~".pull_@{index}")   {
                .mixin()  when (@grid < @index) {display: none;}
                .mixin()  when (@grid >= @index) {
                    position: relative;
                    left: -(@width / @grid * @index);
                }
                .mixin();
            }

            (~".push_@{index}")   {
                .mixin()  when (@grid <  @index) {display: none;}
                .mixin()  when (@grid >= @index) {
                    position: relative;
                    left: (@width / @grid * @index);
                }
                .mixin();
            }

            (~".suffix_@{index}") {
                .mixin()  when (@grid <  @index) {display: none;}
                .mixin()  when (@grid >= @index) {
                    padding-right: (@width / @grid * @index);
                }
                .mixin();
            }

            .loop(@index - 1);
        }
        .loop (0) {}

        .loop(@grid);

        .alpha { margin-left:  0; }
        .omega { margin-right: 0; }
    }
}

@standard_gutter    : 20px;
@max_width          : 960px;
@max_less           : @max_width - 1;
@iPhone_portrait    : 300px;
@iPhone_landscape   : 480px;
@iPad_portrait      : 740px;

.container_12 { #grid > #system(12, @standard_gutter, @max_width); }
.container_16 { #grid > #system(16, @standard_gutter, @max_width); }
.container_24 { #grid > #system(24, @standard_gutter, @max_width); }

// used below to redefine container widths
#adjust(@width) {
    body { min-width: @width; }
    [class*="container"] { width: @width !important; }
}

/* Responsive-ness via media queries */
@media only screen and (min-width: 1px) and (max-width: @max_less) {
    #adjust(@iPhone_portrait);

    // container(s) here need to match above for specificity
    [class*="container"] {
        [class*="grid"]
        ,[class*="prefix"]
        ,[class*="pull"]
        ,[class*="push"]
        ,[class*="suffix"] {
            display: block;
            float: none;
            left: 0px;
            margin: 0px;
            padding: 0px;
            width: 100%;
        }
    }
}

@media only screen and (min-width: @iPhone_landscape) {
                           #adjust(@iPhone_landscape);}

@media only screen and (min-width: @iPad_portrait) {
                           #adjust(@iPad_portrait);}

@media only screen and (min-width: @max_width) {
                           #adjust(@max_width);}